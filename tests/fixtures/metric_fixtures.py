from datetime import datetime
import os
import io
from typing_extensions import Generator
import pickle
import copy

import pytest
import pandas as pd
import numpy as np

from silvimetric import (
    Log,
    StorageConfig,
    ShatterConfig,
    Storage,
    Data,
    Bounds,
    Metric,
)
from silvimetric.resources.attribute import Attribute
from silvimetric.resources.metrics.stats import maximum, minimum
from silvimetric.resources.metrics.p_moments import mean
from silvimetric import __version__ as svversion


@pytest.fixture(scope='function')
def autzen_storage(
    tmp_path_factory: pytest.TempPathFactory,
) -> Generator[StorageConfig, None, None]:
    path = tmp_path_factory.mktemp('test_tdb')
    p = os.path.abspath(path)

    srs = """PROJCS[\"NAD83 / Oregon GIC Lambert (ft)\",
GEOGCS[\"NAD83\",DATUM[\"North_American_Datum_1983\",SPHEROID[\"GRS 1980\",
6378137,298.257222101,AUTHORITY[\"EPSG\",\"7019\"]],AUTHORITY[\"EPSG\",\"6269\"]],
PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",
0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4269\"]],
PROJECTION[\"Lambert_Conformal_Conic_2SP\"],PARAMETER[\"latitude_of_origin\",
41.75],PARAMETER[\"central_meridian\",-120.5],PARAMETER[\"standard_parallel_1\",
43],PARAMETER[\"standard_parallel_2\",45.5],PARAMETER[\"false_easting\",
1312335.958],PARAMETER[\"false_northing\",0],UNIT[\"foot\",0.3048,
AUTHORITY[\"EPSG\",\"9002\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],
AUTHORITY[\"EPSG\",\"2992\"]]"""
    b = Bounds(635579.2, 848884.83, 639003.73, 853536.21)
    sc = StorageConfig(b, srs, 10, tdb_dir=p)
    Storage.create(sc)
    yield sc


@pytest.fixture(scope='function')
def autzen_data(
    autzen_filepath: str, autzen_storage: StorageConfig
) -> Generator[Data, None, None]:
    d = Data(autzen_filepath, autzen_storage)
    yield d


@pytest.fixture(scope='function')
def metric_data(autzen_data: Data) -> Generator[pd.DataFrame, None, None]:
    p = autzen_data.pipeline
    autzen_data.execute()
    points = p.get_dataframe(0)
    points.loc[:, 'xi'] = np.floor(points.xi)
    points.loc[:, 'yi'] = np.ceil(points.yi)
    points = points.loc[points.xi == 1]
    points = points.loc[points.yi == 437]
    yield points[['Z', 'Intensity', 'xi', 'yi']]


@pytest.fixture(scope='function')
def metric_data_results() -> Generator[pd.DataFrame, None, None]:
    result_bytes = io.BytesIO(
        b'\x80\x04\x95\xa9\x12\x00\x00\x00\x00\x00\x00\x8c\x11pandas.core.frame\x94\x8c\tDataFrame\x94\x93\x94)\x81\x94}\x94(\x8c\x04_mgr\x94\x8c\x1epandas.core.internals.managers\x94\x8c\x0cBlockManager\x94\x93\x94(\x8c\x16pandas._libs.internals\x94\x8c\x0f_unpickle_block\x94\x93\x94\x8c\x16numpy._core.multiarray\x94\x8c\x0c_reconstruct\x94\x93\x94\x8c\x05numpy\x94\x8c\x07ndarray\x94\x93\x94K\x00\x85\x94C\x01b\x94\x87\x94R\x94(K\x01K\x02K\x01\x86\x94h\x0f\x8c\x05dtype\x94\x93\x94\x8c\x02f8\x94\x89\x88\x87\x94R\x94(K\x03\x8c\x01<\x94NNNJ\xff\xff\xff\xffJ\xff\xff\xff\xffK\x00t\x94b\x89C\x10\xc0\xec\x9e<,\xb0z@\x00\x00\x00\x00\x00\x00p@\x94t\x94b\x8c\x08builtins\x94\x8c\x05slice\x94\x93\x94K\x00K\x02K\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x02K\x01\x86\x94h\x1b\x89C\x10%\x06\x81\x95C\xe7z@\x00\x00\x00\x00\x00\x00p@\x94t\x94bh"K\x02K\x04K\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x02K\x01\x86\x94h\x1b\x89C\x10\xe4\xa5\x9b\xc4 ,{@\x00\x00\x00\x00\x00\x00p@\x94t\x94bh"K\x04K\x06K\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x02K\x01\x86\x94h\x1b\x89C\x10\x94\x18\x04V\x0ei{@\x00\x00\x00\x00\x00\x00p@\x94t\x94bh"K\x06K\x08K\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x02K\x01\x86\x94h\x1b\x89C\x10\x1f\x85\xebQ\xb8z{@\x00\x00\x00\x00\x00\x00p@\x94t\x94bh"K\x08K\nK\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x02K\x01\x86\x94h\x1b\x89C\x10\xf2\xd2Mb\x10\xa4{@\xcc\xcc\xcc\xcc\xcc\xcc|@\x94t\x94bh"K\nK\x0cK\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x02K\x01\x86\x94h\x1b\x89C\x10\xc3\xf5(\\\x8f\x1a|@\x00\x00\x00\x00\x00\x00\x88@\x94t\x94bh"K\x0cK\x0eK\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x02K\x01\x86\x94h\x1b\x89C\x10\x15\xaeG\xe1z\xfc|@\x00\x00\x00\x00\x00\x00\x88@\x94t\x94bh"K\x0eK\x10K\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x02K\x01\x86\x94h\x1b\x89C\x10\xf4\xfd\xd4x\xe9n~@ffffff\x92@\x94t\x94bh"K\x10K\x12K\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x02K\x01\x86\x94h\x1b\x89C\x10\xf6(\\\x8f\xc2\xe9~@\x00\x00\x00\x00\x00\x00\x94@\x94t\x94bh"K\x12K\x14K\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x02K\x01\x86\x94h\x1b\x89C\x10R\xb8\x1e\x85\xeb\xfd~@\x00\x00\x00\x00\x00\x00\x94@\x94t\x94bh"K\x14K\x16K\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x02K\x01\x86\x94h\x1b\x89C\x10\x0c\x02+\x87\x165\x7f@hfffff\x9a@\x94t\x94bh"K\x16K\x18K\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x02K\x01\x86\x94h\x1b\x89C\x10\xcd\xcc\xcc\xcc\xcc\x8c\x7f@633333\xc1@\x94t\x94bh"K\x18K\x1aK\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x02K\x01\x86\x94h\x1b\x89C\x10\x1f\x85\xebQ\xb8\x96\x7f@\xca\xcc\xcc\xcc\xccL\xd5@\x94t\x94bh"K\x1aK\x1cK\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x02K\x01\x86\x94h\x1b\x89C\x10-\xb2\x9d\xef\xa7\x9e\x7f@\xf5(\\\x8f\xc2u\xdf@\x94t\x94bh"K\x1cK\x1eK\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x02K\x01\x86\x94h\x1b\x89C\x10\xa4\x9b\xc4 \xb0\x82Q@63333\xb3\xc0@\x94t\x94bh"K\x1eK K\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x02K\x01\x86\x94h\x1b\x89C\x10\xe8\xfb\xa9\xf1\xd2\xbdR@\xca\xcc\xcc\xcc\xcc\x0c\xd5@\x94t\x94bh"K K"K\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x01K\x01\x86\x94h\x1b\x89C\x08~\xf1@\x19\xf0\xe2V@\x94t\x94bh"K"K#K\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x02K\x01\x86\x94h\x1b\x89C\x10`,\xf9\xc5\x92?}@\x8e\xe38\x8e\xe38\xb2@\x94t\x94bh"K#K%K\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x02K\x01\x86\x94h\x1b\x89C\x100Tv\x98\xba\xec2@8\x8e\xe38\x8e\xe3\xaf@\x94t\x94bh"K%K\'K\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x02K\x01\x86\x94h\x1b\x89C\x10\x00\xc0\xb6m\xdb\xb6\xbd\xbf\x08A\x10\x04A\x10\xad@\x94t\x94bh"K\'K)K\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x02K\x01\x86\x94h\x1b\x89C\x10\x00\xc0\x1d\x0f%\x04\x10\xc0\x04\x00\x00\x00\x00\x00\xac@\x94t\x94bh"K)K+K\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x02K\x01\x86\x94h\x1b\x89C\x10\xc0\x1e\xa6\xab\x84\xb4\xa4?\x00\x00\x00\x00\x00\x00\xec?\x94t\x94bh"K+K-K\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x02K\x01\x86\x94h\x1b\x89C\x10\xdb ;GA\x1fy\xbfI(d\x9e-*\xed?\x94t\x94bh"K-K/K\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x02K\x01\x86\x94h\x1b\x89C\x10Ca\x87\xaf\xf9\x14\xcb\xbf\x1e\x9c\x8f\xc1\xf9\x18\xec?\x94t\x94bh"K/K1K\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x02K\x01\x86\x94h\x1b\x89C\x10gffff\xa2z@\x00\x00\x00\x00\x00\x00p@\x94t\x94bh"K1K3K\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x02K\x01\x86\x94h\x1b\x89C\x10\x15\xaeG\xe1z\xfc|@\x00\x00\x00\x00\x00\x00\x88@\x94t\x94bh"K3K5K\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x01K\x01\x86\x94h\x1b\x89C\x08gffff\xa2z@\x94t\x94bh"K5K6K\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x01K\x01\x86\x94h\x18\x8c\x02u2\x94\x89\x88\x87\x94R\x94(K\x03h\x1cNNNJ\xff\xff\xff\xffJ\xff\xff\xff\xffK\x00t\x94b\x89C\x02\x00\x01\x94t\x94bh"K6K7K\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x01K\x01\x86\x94h\x1b\x89C\x08q=\n\xd7\xa3\xa0\x7f@\x94t\x94bh"K7K8K\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x01K\x01\x86\x94j;\x01\x00\x00\x89C\x02\x00\x88\x94t\x94bh"K8K9K\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x02K\x01\x86\x94h\x1b\x89C\x10\x82\x18\x91\x8eH\'>@\xce\xbf9A:\xdb\xc4@\x94t\x94bh"K9K;K\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x02K\x01\x86\x94h\x1b\x89C\x10Z\xa3\xfd.\xc1~\xb0?p\x8f\xc8,\x1aP\x02@\x94t\x94bh"K;K=K\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x02K\x01\x86\x94h\x1b\x89C\x10\x98\x99\x99\x99\x99\x19L@\x00\x00\x00\x00\x00\x00\x90@\x94t\x94bh"K=K?K\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x02K\x01\x86\x94h\x1b\x89C\x10x\x8c\xbf-\x9b\xc0\xe0?a\xccJ\xa3GT\xc0?\x94t\x94bh"K?KAK\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x01K\x01\x86\x94h\x1b\x89C\x08\xcc-\xdd\xbb\x19O}@\x94t\x94bh"KAKBK\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x01K\x01\x86\x94h\x1b\x89C\x08\xb7.\xff(\x8b^}@\x94t\x94bh"KBKCK\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x02K\x01\x86\x94h\x1b\x89C\x10`,\xf9\xc5\x92?}@\x8e\xe38\x8e\xe38\xb2@\x94t\x94bh"KCKEK\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x02K\x01\x86\x94h\x1b\x89C\x10\x1d\x16jM\x13\xf7\x8f@\x1b\xc7q\x1c\xc7\x95\x9eA\x94t\x94bh"KEKGK\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x02K\x01\x86\x94h\x1b\x89C\x10\xc4\xbf\xaf\x1fd\xa2\x94?\x15m\xbd\x07\xac \x06@\x94t\x94bh"KGKIK\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x02K\x01\x86\x94h\x1b\x89C\x10I\xe4\x19\xb3L\x83\xf7?\x1d\xe7\xc5F0\xda\x1f@\x94t\x94bh"KIKKK\x01\x87\x94R\x94K\x02\x87\x94R\x94t\x94]\x94(\x8c\x18pandas.core.indexes.base\x94\x8c\n_new_Index\x94\x93\x94j\xbd\x01\x00\x00\x8c\x05Index\x94\x93\x94}\x94(\x8c\x04data\x94h\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01KK\x85\x94h\x18\x8c\x02O8\x94\x89\x88\x87\x94R\x94(K\x03\x8c\x01|\x94NNNJ\xff\xff\xff\xffJ\xff\xff\xff\xffK?t\x94b\x89]\x94(\x8c\x07m_Z_p01\x94\x8c\x0fm_Intensity_p01\x94\x8c\x07m_Z_p05\x94\x8c\x0fm_Intensity_p05\x94\x8c\x07m_Z_p10\x94\x8c\x0fm_Intensity_p10\x94\x8c\x07m_Z_p20\x94\x8c\x0fm_Intensity_p20\x94\x8c\x07m_Z_p25\x94\x8c\x0fm_Intensity_p25\x94\x8c\x07m_Z_p30\x94\x8c\x0fm_Intensity_p30\x94\x8c\x07m_Z_p40\x94\x8c\x0fm_Intensity_p40\x94\x8c\x07m_Z_p50\x94\x8c\x0fm_Intensity_p50\x94\x8c\x07m_Z_p60\x94\x8c\x0fm_Intensity_p60\x94\x8c\x07m_Z_p70\x94\x8c\x0fm_Intensity_p70\x94\x8c\x07m_Z_p75\x94\x8c\x0fm_Intensity_p75\x94\x8c\x07m_Z_p80\x94\x8c\x0fm_Intensity_p80\x94\x8c\x07m_Z_p90\x94\x8c\x0fm_Intensity_p90\x94\x8c\x07m_Z_p95\x94\x8c\x0fm_Intensity_p95\x94\x8c\x07m_Z_p99\x94\x8c\x0fm_Intensity_p99\x94\x8c\tm_Z_90m10\x94\x8c\x11m_Intensity_90m10\x94\x8c\tm_Z_95m05\x94\x8c\x11m_Intensity_95m05\x94\x8c\x10m_Z_profile_area\x94\x8c\x06m_Z_l1\x94\x8c\x0em_Intensity_l1\x94\x8c\x06m_Z_l2\x94\x8c\x0em_Intensity_l2\x94\x8c\x06m_Z_l3\x94\x8c\x0em_Intensity_l3\x94\x8c\x06m_Z_l4\x94\x8c\x0em_Intensity_l4\x94\x8c\x07m_Z_lcv\x94\x8c\x0fm_Intensity_lcv\x94\x8c\rm_Z_lskewness\x94\x8c\x15m_Intensity_lskewness\x94\x8c\rm_Z_lkurtosis\x94\x8c\x15m_Intensity_lkurtosis\x94\x8c\x08m_Z_mode\x94\x8c\x10m_Intensity_mode\x94\x8c\nm_Z_median\x94\x8c\x12m_Intensity_median\x94\x8c\x07m_Z_min\x94\x8c\x0fm_Intensity_min\x94\x8c\x07m_Z_max\x94\x8c\x0fm_Intensity_max\x94\x8c\nm_Z_stddev\x94\x8c\x12m_Intensity_stddev\x94\x8c\x06m_Z_cv\x94\x8c\x0em_Intensity_cv\x94\x8c\x06m_Z_iq\x94\x8c\x0em_Intensity_iq\x94\x8c\x17m_Z_canopy_relief_ratio\x94\x8c\x1fm_Intensity_canopy_relief_ratio\x94\x8c\nm_Z_sqmean\x94\x8c\nm_Z_cumean\x94\x8c\x08m_Z_mean\x94\x8c\x10m_Intensity_mean\x94\x8c\x0cm_Z_variance\x94\x8c\x14m_Intensity_variance\x94\x8c\x0cm_Z_skewness\x94\x8c\x14m_Intensity_skewness\x94\x8c\x0cm_Z_kurtosis\x94\x8c\x14m_Intensity_kurtosis\x94et\x94b\x8c\x04name\x94Nu\x86\x94R\x94j\xbf\x01\x00\x00\x8c\x19pandas.core.indexes.multi\x94\x8c\nMultiIndex\x94\x93\x94}\x94(\x8c\x06levels\x94]\x94(j\xbf\x01\x00\x00j\xc1\x01\x00\x00}\x94(j\xc3\x01\x00\x00h\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x01\x85\x94h\x1b\x89C\x08\x00\x00\x00\x00\x00\x00\xf0?\x94t\x94bj\x1a\x02\x00\x00\x8c\x02xi\x94u\x86\x94R\x94j\xbf\x01\x00\x00j\xc1\x01\x00\x00}\x94(j\xc3\x01\x00\x00h\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x01\x85\x94h\x1b\x89C\x08\x00\x00\x00\x00\x00P{@\x94t\x94bj\x1a\x02\x00\x00\x8c\x02yi\x94u\x86\x94R\x94e\x8c\x05codes\x94]\x94(h\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x01\x85\x94h\x18\x8c\x02i1\x94\x89\x88\x87\x94R\x94(K\x03j\xcb\x01\x00\x00NNNJ\xff\xff\xff\xffJ\xff\xff\xff\xffK\x00t\x94b\x89C\x01\x00\x94t\x94bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x01\x85\x94j?\x02\x00\x00\x89jA\x02\x00\x00t\x94be\x8c\tsortorder\x94N\x8c\x05names\x94]\x94(j*\x02\x00\x00j4\x02\x00\x00eu\x86\x94R\x94e\x86\x94R\x94\x8c\x04_typ\x94\x8c\tdataframe\x94\x8c\t_metadata\x94]\x94\x8c\x05attrs\x94}\x94\x8c\x06_flags\x94}\x94\x8c\x17allows_duplicate_labels\x94\x88sub.' # noqa: E501
    )

    result_bytes.seek(0)
    df = pickle.load(result_bytes)
    yield df


@pytest.fixture(scope='function')
def metric_dag_results() -> Generator[pd.DataFrame, None, None]:
    result_bytes = io.BytesIO(
        b'\x80\x04\x95\xe8\x05\x00\x00\x00\x00\x00\x00\x8c\x11pandas.core.frame\x94\x8c\tDataFrame\x94\x93\x94)\x81\x94}\x94(\x8c\x04_mgr\x94\x8c\x1epandas.core.internals.managers\x94\x8c\x0cBlockManager\x94\x93\x94(\x8c\x16pandas._libs.internals\x94\x8c\x0f_unpickle_block\x94\x93\x94\x8c\x16numpy._core.multiarray\x94\x8c\x0c_reconstruct\x94\x93\x94\x8c\x05numpy\x94\x8c\x07ndarray\x94\x93\x94K\x00\x85\x94C\x01b\x94\x87\x94R\x94(K\x01K\x02K\x01\x86\x94h\x0f\x8c\x05dtype\x94\x93\x94\x8c\x02f8\x94\x89\x88\x87\x94R\x94(K\x03\x8c\x01<\x94NNNJ\xff\xff\xff\xffJ\xff\xff\xff\xffK\x00t\x94b\x89C\x10\xbe:\xa92\x86U}@\xaf\xa1\xbc\x86\xf2\x1a\xa0@\x94t\x94b\x8c\x08builtins\x94\x8c\x05slice\x94\x93\x94K\x00K\x02K\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x02K\x01\x86\x94h\x1b\x89C\x10@d#\x0b\xa2Z/@\x94\xd7P^Cy\x95@\x94t\x94bh"K\x02K\x04K\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x02K\x01\x86\x94h\x1b\x89C\x10\x00\x9c`\xcc\xf4\xa3\xd5\xbf\x8cA\xc8\xba\xd5\x9f\x8b@\x94t\x94bh"K\x04K\x06K\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x02K\x01\x86\x94h\x1b\x89C\x10\x00\xd8w\xa8z\t\xd3\xbfDmR\x88\x1c\xf4\x82@\x94t\x94bh"K\x06K\x08K\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x02K\x01\x86\x94h\x1b\x89C\x10\nChZ\r\x1a\xa1?UUUUUU\xe5?\x94t\x94bh"K\x08K\nK\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x02K\x01\x86\x94h\x1b\x89C\x10or\x0f\x8f\x17\x16\x96\xbf\xbe\x17w\xd65\x95\xe4?\x94t\x94bh"K\nK\x0cK\x01\x87\x94R\x94K\x02\x87\x94R\x94h\x0bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x02K\x01\x86\x94h\x1b\x89C\x10\x9a\xafQK\xe2m\x93\xbf\xd9\xa7M\xf3\x98>\xdc?\x94t\x94bh"K\x0cK\x0eK\x01\x87\x94R\x94K\x02\x87\x94R\x94t\x94]\x94(\x8c\x18pandas.core.indexes.base\x94\x8c\n_new_Index\x94\x93\x94he\x8c\x05Index\x94\x93\x94}\x94(\x8c\x04data\x94h\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x0e\x85\x94h\x18\x8c\x02O8\x94\x89\x88\x87\x94R\x94(K\x03\x8c\x01|\x94NNNJ\xff\xff\xff\xffJ\xff\xff\xff\xffK?t\x94b\x89]\x94(\x8c\x06m_Z_l1\x94\x8c\x0em_Intensity_l1\x94\x8c\x06m_Z_l2\x94\x8c\x0em_Intensity_l2\x94\x8c\x06m_Z_l3\x94\x8c\x0em_Intensity_l3\x94\x8c\x06m_Z_l4\x94\x8c\x0em_Intensity_l4\x94\x8c\x07m_Z_lcv\x94\x8c\x0fm_Intensity_lcv\x94\x8c\rm_Z_lskewness\x94\x8c\x15m_Intensity_lskewness\x94\x8c\rm_Z_lkurtosis\x94\x8c\x15m_Intensity_lkurtosis\x94et\x94b\x8c\x04name\x94Nu\x86\x94R\x94hg\x8c\x19pandas.core.indexes.multi\x94\x8c\nMultiIndex\x94\x93\x94}\x94(\x8c\x06levels\x94]\x94(hghi}\x94(hkh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x01\x85\x94h\x1b\x89C\x08\x00\x00\x00\x00\x00\x00\xf0?\x94t\x94bh\x85\x8c\x02xi\x94u\x86\x94R\x94hghi}\x94(hkh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x01\x85\x94h\x1b\x89C\x08\x00\x00\x00\x00\x00P{@\x94t\x94bh\x85\x8c\x02yi\x94u\x86\x94R\x94e\x8c\x05codes\x94]\x94(h\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x01\x85\x94h\x18\x8c\x02i1\x94\x89\x88\x87\x94R\x94(K\x03hsNNNJ\xff\xff\xff\xffJ\xff\xff\xff\xffK\x00t\x94b\x89C\x01\x00\x94t\x94bh\x0eh\x11K\x00\x85\x94h\x13\x87\x94R\x94(K\x01K\x01\x85\x94h\xaa\x89h\xact\x94be\x8c\tsortorder\x94N\x8c\x05names\x94]\x94(h\x95h\x9feu\x86\x94R\x94e\x86\x94R\x94\x8c\x04_typ\x94\x8c\tdataframe\x94\x8c\t_metadata\x94]\x94\x8c\x05attrs\x94}\x94\x8c\x06_flags\x94}\x94\x8c\x17allows_duplicate_labels\x94\x88sub.'
    )
    result_bytes.seek(0)
    df = pickle.load(result_bytes)
    yield df


@pytest.fixture(scope='function')
def metric_shatter_config(
    tmp_path_factory: pytest.TempPathFactory,
    copc_filepath: str,
    attrs: list[Attribute],
    bounds: Bounds,
    date: datetime,
    crs: str,
    resolution: int,
    alignment: int,
) -> Generator[pd.Series, None, None]:
    metrics = [copy.deepcopy(mean)]
    path = tmp_path_factory.mktemp('test_tdb')
    p = os.path.abspath(path)
    log = Log('INFO')

    def dummy_fn(df: pd.DataFrame) -> pd.DataFrame:
        assert isinstance(df, pd.DataFrame)
        ndf = df[df['NumberOfReturns'] >= 1]
        assert isinstance(ndf, pd.DataFrame)
        return ndf

    metrics[0].add_filter(dummy_fn)
    metrics[0].attributes = attrs

    """Make output"""
    st_config = StorageConfig(
        tdb_dir=p,
        log=log,
        crs=crs,
        root=bounds,
        resolution=resolution,
        attrs=attrs,
        metrics=metrics,
        alignment=alignment,
        version=svversion,
    )

    Storage.create(st_config)
    sh_config = ShatterConfig(
        tdb_dir=p, log=log, filename=copc_filepath, bounds=bounds, date=date
    )
    yield sh_config


@pytest.fixture
def depless_crr():
    def m_crr_1(data, *args):
        mean = data.mean()
        mi = data.min()
        ma = data.max()
        d = ma - mi
        if d == 0:
            return np.nan

        return (mean - mi) / d

    return Metric('depless_crr', np.float32, m_crr_1)


@pytest.fixture
def dep_crr():
    def m_crr_2(data, *args):
        m, mi, ma = args
        den = ma - mi
        if den == 0:
            return np.nan
        return (m - mi) / den

    return Metric('deps_crr', np.float32, m_crr_2, [mean, minimum, maximum])
