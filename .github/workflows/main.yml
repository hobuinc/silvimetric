name: main

on:
  push:
    branches-ignore: ["dependabot/**"]
  pull_request:
    paths-ignore:
      - '**.md'

env:
  PIP_DISABLE_PIP_VERSION_CHECK: 1

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    defaults:
      run:
        shell: bash -el {0}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: conda-incubator/setup-miniconda@v2
        with:
          miniforge-version: latest
          miniforge-variant: Mambaforge
          environment-file: environment.yml
          auto-update-conda: false
          python-version: "3.11"
          use-mamba: true
          activate-environment: silvistat
      - name: "Install Test Framework"
        run: pip install pytest
      - name: "Install Package"
        run: pip install .
      - name: "Debug Info"
        run: |
          echo python location: `which python`
          echo python version: `python --version`
          echo pytest location: `which pytest`
          echo installed packages
          conda list
          pip list
      - name: "Grab Test Data"
        run: curl --output-dir "tests/data" -C - -OL --create-dirs https://github.com/PDAL/data/raw/master/autzen/autzen-classified.copc.laz
      - name: Run Tests
        run: |
          pytest

  analyze:
    name: analyze
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -el {0}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - uses: conda-incubator/setup-miniconda@v2
        with:
          miniforge-version: latest
          miniforge-variant: Mambaforge
          environment-file: environment.yml
          auto-update-conda: false
          python-version: "3.11"
          use-mamba: true
          activate-environment: silvistat
      - name: Config CodeQL
        run: |
          echo "CODEQL_PYTHON=$(which python)" >> $GITHUB_ENV
      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: 'python'
          # Supported options are ['csharp', 'cpp', 'go', 'java', 'javascript', 'python']
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with "+" to use these queries and those in the config file.
          queries: +security-and-quality
          setup-python-dependencies: false

      # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
      # If this step fails, then you should remove it and run the build manually (see below)
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
      # üìö https://git.io/JvXDl

      # ‚úèÔ∏è If the Autobuild fails above, remove it and uncomment the following three lines
      #    and modify them (or add more) to build your code if your project
      #    uses a compiled language

      #- run: |
      #   make bootstrap
      #   make release

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
